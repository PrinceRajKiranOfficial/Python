# Class and Object in OOP

Understanding the difference between **Class** and **Object** is fundamental in Object-Oriented Programming (OOP).

## Class
- A **class** is a blueprint, prototype, or template for creating objects.
- It defines attributes (data) and behaviors (methods) but does not occupy memory by itself.

**Example:**
```python
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def drive(self):
        print(f"{self.brand} {self.model} is driving.")
```

## Object
- An **object** is a real-world entity created from a class.
- It is an instance of a class and occupies memory.

**Example:**
```python
my_car = Car("Tesla", "Model X")
my_car.drive()  # Output   : Tesla Model X is driving.
